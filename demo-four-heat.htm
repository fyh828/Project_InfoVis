<!DOCTYPE html>
<!-- saved from url=(0061)https://www.mapbox.com/help/demos/turfjs-intro/demo-four.html -->
<html style=""><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <title></title>
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
    <script src="./demo-four_files/mapbox-gl.js"></script>
    <link href="./demo-four_files/mapbox-gl.css" rel="stylesheet">
<!--    <script src="./demo-four_files/turf.min.js"></script>-->

    <script src="https://npmcdn.com/@turf/turf/turf.min.js"></script>
    <script src="./libraries/PapaParse/papaparse.min.js"></script>
    <script src="./libraries/require.js"></script>
    <script src="./libraries/jquery-3.3.1.min.js"></script>
    <style>
        body { margin:0; padding:0; }
        #map { position:absolute; top:0; bottom:0; width:100%; }
    </style>
</head>

<body>
   
    
    
    <div id="map" class="mapboxgl-map">
        
        
        <div class="mapboxgl-canary" style="visibility: hidden;"></div><div class="mapboxgl-canvas-container mapboxgl-interactive mapboxgl-touch-drag-pan mapboxgl-touch-zoom-rotate">
    <canvas class="mapboxgl-canvas" tabindex="0" aria-label="Map" width="1088" height="1556" style="position: absolute; width: 544px; height: 778px;"></canvas>
  


</div>
        
        
        
        <canvas class="voronoi-canvas" id="voronoi-canvas" width="1088" height="1556" style="position: absolute; width: 544px; height: 778px; z-index:0;"></canvas>
<div class="mapboxgl-control-container"><div class="mapboxgl-ctrl-top-left"></div><div class="mapboxgl-ctrl-top-right"></div><div class="mapboxgl-ctrl-bottom-left"><div class="mapboxgl-ctrl" style="display: block;"><a class="mapboxgl-ctrl-logo" target="_blank" href="https://www.mapbox.com/" aria-label="Mapbox logo" rel="noopener"></a></div></div><div class="mapboxgl-ctrl-bottom-right"><div class="mapboxgl-ctrl mapboxgl-ctrl-attrib mapboxgl-compact"><div class="mapboxgl-ctrl-attrib-inner"><a href="https://www.mapbox.com/about/maps/" target="_blank">© Mapbox</a> <a href="http://www.openstreetmap.org/about/" target="_blank">© OpenStreetMap</a> <a class="mapbox-improve-map" href="https://www.mapbox.com/feedback/?owner=mapbox&amp;id=light-v9&amp;access_token=pk.eyJ1IjoiZXhhbXBsZXMiLCJhIjoiY2lqbmpqazdlMDBsdnRva284cWd3bm11byJ9.V6Hg2oYJwMAxeoR9GEzkAA" target="_blank">Improve this map</a></div></div></div></div></div>
<script>
    var ttcCoords = [];
    var voronoiFeatures = [];
    var voronoiDraw = false;
    mapboxgl.accessToken = 'pk.eyJ1IjoibGVvbG9jIiwiYSI6ImNqcXBzYW1hYzAweGQzeG82ZHA2cDJ4cGoifQ.TViFkTfiLiOBnDMhFP097Q';
    var map = new mapboxgl.Map({
        container: 'map', // container id
        style: 'mapbox://styles/mapbox/light-v9', //stylesheet location
        center: [2.3473612552142624,48.85895618133369], // starting position
        zoom: 12 // starting zoom
    });
    
    //var file = new File([""], "./data/tests.csv");
    //var stop_table;
    //console.log( file );

    var pos_data = {
        "type": "FeatureCollection",
        "features": []
    };

    var pos_tmp = {};

    function doStuff(data) {
        for(var i=1;i<data.length;i++){
            pos_tmp = {};
            pos_tmp = {
                "type": "Feature",
                
                "properties": { "Name": data[i][2],
                    "Address": data[i][3] },
                
                "geometry": { "type": "Point",
                    "coordinates": [ data[i][5], data[i][4] ]
                }
            };
            //console.log(pos_data.features);
            pos_data.features.push(pos_tmp);
            ttcCoords.push([ data[i][5], data[i][4] ]);
        
            
        }
        
        
        //var t = JSON.stringify(data);
        //console.log(t);
    }
    //console.log(pos_data.features);
    
    function parseData(url, callBack) {
        Papa.parse(url, {
                   download: true,
                   dynamicTyping: true,
                   complete: function(results) {
                   callBack(results.data);
                   }
                   });
    }

    // Import data here

    parseData("./data/stops.csv", doStuff);
   //parseData("./data/test.csv", doStuff);
    


  map.on('load', function(){
         
    map.addLayer({
      id: 'pos_data',
      type: 'symbol',
      source: {
        type: 'geojson',
        data: pos_data
      },
    
      paint: { }
    });
 
         map.addLayer({
                      id: 'trees-heat',
                      type: 'heatmap',
                      source: {
                      type: 'geojson',
                      data: pos_data
                      },
                      maxzoom: 15,
                      paint: {
                      // increase weight as diameter breast height increases
                      'heatmap-weight': {
                      property: 'dbh',
                      type: 'exponential',
                      stops: [
                              [1, 0],
                              [62, 1]
                              ]
                      },
                      // increase intensity as zoom level increases
                      'heatmap-intensity': {
                      stops: [
                              [11, 1],
                              [15, 3]
                              ]
                      },
                      // assign color values be applied to points depending on their density
                      'heatmap-color': [
                                        'interpolate',
                                        ['linear'],
                                        ['heatmap-density'],
                                        0, 'rgba(236,222,239,0)',
                                        0.2, 'rgb(208,209,230)',
                                        0.4, 'rgb(166,189,219)',
                                        0.6, 'rgb(103,169,207)',
                                        0.8, 'rgb(28,144,153)'
                                        ],
                      // increase radius as zoom increases
                      'heatmap-radius': {
                      stops: [
                              [11, 15],
                              [15, 20]
                              ]
                      },
                      // decrease opacity to transition into the circle layer
                      'heatmap-opacity': {
                      default: 1,
                      stops: [
                              [14, 1],
                              [15, 0]
                              ]
                      },
                      }
                      }, 'waterway-label');
         
         
         map.addLayer({
                      id: 'trees-point',
                      type: 'circle',
                      source: {
                      type: 'geojson',
                      data: pos_data
                      },
                      minzoom: 14,
                      paint: {
                      // increase the radius of the circle as the zoom level and dbh value increases
                      'circle-radius': {
                      property: 'dbh',
                      type: 'exponential',
                      stops: [
                              [{ zoom: 15, value: 1 }, 5],
                              [{ zoom: 15, value: 62 }, 10],
                              [{ zoom: 22, value: 1 }, 20],
                              [{ zoom: 22, value: 62 }, 50],
                              ]
                      },
                      'circle-color': {
                      property: 'dbh',
                      type: 'exponential',
                      stops: [
                              [0, 'rgba(236,222,239,0)'],
                              [10, 'rgb(236,222,239)'],
                              [20, 'rgb(208,209,230)'],
                              [30, 'rgb(166,189,219)'],
                              [40, 'rgb(103,169,207)'],
                              [50, 'rgb(28,144,153)'],
                              [60, 'rgb(1,108,89)']
                              ]
                      },
                      'circle-stroke-color': 'white',
                      'circle-stroke-width': 1,
                      'circle-opacity': {
                      stops: [
                              [14, 0],
                              [15, 1]
                              ]
                      }
                      }
                      }, 'waterway-label');
         
         
  });

  var popup = new mapboxgl.Popup();

  map.on('mousemove', function (e) {

      var features = map.queryRenderedFeatures(e.point, { layers: ['pos_data'] });
      if (!features.length) {
          popup.remove();
          return;
      }

      var feature = features[0];

      popup.setLngLat(feature.geometry.coordinates)
          .setHTML(feature.properties.Name)
          .addTo(map);

      map.getCanvas().style.cursor = (features.length) ? 'pointer' : '';

  });
  
  map.on('click', 'trees-point', function(e) {
         new mapboxgl.Popup()
         .setLngLat(e.features[0].geometry.coordinates)
         .setHTML(e.features[0].properties.Name + " : " +e.features[0].properties.Address)
         .addTo(map);
         });
         
/*
  map.on('click', function(e){
    var libraryFeatures = map.queryRenderedFeatures(e.point, { layers: ['pos_data'] });
      if (!libraryFeatures.length) {
          return;
      }

      var libraryFeature = libraryFeatures[0];

      var nearestHospital = turf.nearest(libraryFeature, hospitals);

      if (nearestHospital != null) {

        map.getSource('nearest-hospital').setData({
            'type': 'FeatureCollection',
            'features': [
                nearestHospital
              ]
          }
        );

        map.addLayer({
          id: 'nearest-hospital',
          type: 'circle',
          source: 'nearest-hospital', 
          paint: {
            'circle-radius': 12,
            'circle-color': '#486DE0'
          }
        }, 'hospitals');
      }
  });
 */







  </script>


</body></html>
