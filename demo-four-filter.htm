<!DOCTYPE html>
<!-- saved from url=(0061)https://www.mapbox.com/help/demos/turfjs-intro/demo-four.html -->
<html style=""><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <title></title>
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
    <script src="./demo-four_files/mapbox-gl.js"></script>
    <link href="./demo-four_files/mapbox-gl.css" rel="stylesheet">
<!--    <script src="./demo-four_files/turf.min.js"></script>-->

    <script src="https://npmcdn.com/@turf/turf/turf.min.js"></script>
    <script src="./libraries/PapaParse/papaparse.min.js"></script>
    <script src="./libraries/require.js"></script>
    <script src="./libraries/jquery-3.3.1.min.js"></script>
    <style>
        body { margin:0; padding:0; }
        #map { position:absolute; top:0; bottom:0; width:100%; }
    </style>
</head>

<body>
    <style>
        #map.menu {
            position: absolute;
            background: #fff;
            padding: 10px;
            font-family: 'Open Sans', sans-serif;
        }
    </style>
   
    
    
    <div id="map" class="mapboxgl-map">
        <div id='menu'>
            <input type="checkbox" id="option1" name="option1" value="RERA" checked> RER A
                <input type="checkbox" id="option2" name="option2" value="RERB" checked> RER B
              <input type="checkbox" id="option3" name="option3" value="DATALAYER" checked> Data Layer
<!--                        <input type="submit" value="Submit" onclick="filterButton()">-->
       </div>
        
        <div class="mapboxgl-canary" style="visibility: hidden;"></div><div class="mapboxgl-canvas-container mapboxgl-interactive mapboxgl-touch-drag-pan mapboxgl-touch-zoom-rotate">
    <canvas class="mapboxgl-canvas" tabindex="0" aria-label="Map" width="1088" height="1556" style="position: absolute; width: 544px; height: 778px;"></canvas>
  


</div>
        
        
        
        <canvas class="voronoi-canvas" id="voronoi-canvas" width="1088" height="1556" style="position: absolute; width: 544px; height: 778px; z-index:0;"></canvas>
<div class="mapboxgl-control-container"><div class="mapboxgl-ctrl-top-left"></div><div class="mapboxgl-ctrl-top-right"></div><div class="mapboxgl-ctrl-bottom-left"><div class="mapboxgl-ctrl" style="display: block;"><a class="mapboxgl-ctrl-logo" target="_blank" href="https://www.mapbox.com/" aria-label="Mapbox logo" rel="noopener"></a></div></div><div class="mapboxgl-ctrl-bottom-right"><div class="mapboxgl-ctrl mapboxgl-ctrl-attrib mapboxgl-compact"><div class="mapboxgl-ctrl-attrib-inner"><a href="https://www.mapbox.com/about/maps/" target="_blank">© Mapbox</a> <a href="http://www.openstreetmap.org/about/" target="_blank">© OpenStreetMap</a> <a class="mapbox-improve-map" href="https://www.mapbox.com/feedback/?owner=mapbox&amp;id=light-v9&amp;access_token=pk.eyJ1IjoiZXhhbXBsZXMiLCJhIjoiY2lqbmpqazdlMDBsdnRva284cWd3bm11byJ9.V6Hg2oYJwMAxeoR9GEzkAA" target="_blank">Improve this map</a></div></div></div></div></div>
<script>
    var ttcCoords = [];
    var voronoiFeatures = [];
    var voronoiDraw = false;
    mapboxgl.accessToken = 'pk.eyJ1IjoibGVvbG9jIiwiYSI6ImNqcXBzYW1hYzAweGQzeG82ZHA2cDJ4cGoifQ.TViFkTfiLiOBnDMhFP097Q';
    var map = new mapboxgl.Map({
        container: 'map', // container id
        style: 'mapbox://styles/mapbox/light-v9', //stylesheet location
        center: [2.3473612552142624,48.85895618133369], // starting position
        zoom: 12 // starting zoom
    });
    
    //var file = new File([""], "./data/tests.csv");
    //var stop_table;
    //console.log( file );

    var pos_data = {
        "type": "FeatureCollection",
        "features": []
    };

    var pos_data2 = {
        "type": "FeatureCollection",
        "features": []
    };

    var pos_tmp = {};

    function doStuff(data) {
        for(var i=1;i<data.length;i++){
            pos_tmp = {};
            pos_tmp = {
                "type": "Feature",
                
                "properties": { "Name": data[i][2],
                    "Address": data[i][3] },
                
                "geometry": { "type": "Point",
                    "coordinates": [ data[i][5], data[i][4] ]
                }
            };
            //console.log(pos_data.features);
            pos_data.features.push(pos_tmp);
            ttcCoords.push([ data[i][5], data[i][4] ]);
        
            
        }
        
    }

    function doStuff2(data) {
        for(var i=1;i<data.length;i++){
            pos_tmp = {};
            pos_tmp = {
                "type": "Feature",
                
                "properties": { "Name": data[i][2],
                    "Address": data[i][3] },
                
                "geometry": { "type": "Point",
                    "coordinates": [ data[i][5], data[i][4] ]
                }
            };
            pos_data2.features.push(pos_tmp);
        }
        
    }

    
    function parseData(url, callBack) {
        Papa.parse(url, {
                   download: true,
                   dynamicTyping: true,
                   complete: function(results) {
                   callBack(results.data);
                   }
                   });
    }

    // Import data here
    
    if(getOptions(1))
        parseData("./data/stops_A.csv", doStuff);
    

    if(getOptions(2))
        parseData("./data/stops_B.csv", doStuff);
        
    if(getOptions(3))
        parseData("./data/test.csv", doStuff2);
    
    document.getElementById("option1").checked = getOptions(1);
    document.getElementById("option2").checked = getOptions(2);
    document.getElementById("option3").checked = getOptions(3);
    
    //parseData("./data/stops.csv", doStuff);
    
    // https://bl.ocks.org/mbostock/6675193
    // https://beta.observablehq.com/@mbostock/u-s-airports-voronoi
    

  map.on('load', function(){
         
    map.addLayer({
      id: 'pos_data',
      type: 'symbol',
      source: {
        type: 'geojson',
        data: pos_data
      },
      layout: { 
        'icon-image': 'bus-11',
        'icon-allow-overlap': true
      },
      paint: { }
    });
         
         map.addLayer({
                      id: 'pos_data2',
                      type: 'symbol',
                      source: {
                      type: 'geojson',
                      data: pos_data2
                      },
                      layout: {
                      'icon-image': 'star-15',
                      'icon-allow-overlap': true
                      },
                      paint: { }
            });
        // console.log(ttcCoords);
        
     generateVoronoi();
     //map.setPaintProperty('paris', 'raster-opacity', 0.8);
         

    map.addSource('nearest-station', {
        type: 'geojson',
        data: {
            'type': 'FeatureCollection',
            'features': [ 
              ]
          }
      });
          
  });

  var popup = new mapboxgl.Popup();

  map.on('mousemove', function (e) {

      var features = map.queryRenderedFeatures(e.point, { layers: ['pos_data','pos_data2'] });
      if (!features.length) {
          popup.remove();
          return;
      }

      var feature = features[0];

      popup.setLngLat(feature.geometry.coordinates)
          .setHTML(feature.properties.Name)
          .addTo(map);

      map.getCanvas().style.cursor = (features.length) ? 'pointer' : '';

  });

  map.on('click', function(e){
    var stationFeatures = map.queryRenderedFeatures(e.point, { layers: ['pos_data2'] });
      if (!stationFeatures.length) {
          return;
      }

      var stationFeatures = stationFeatures[0];

      var nearestStation = turf.nearest(stationFeatures, pos_data);

      if (nearestStation != null) {

        map.getSource('nearest-station').setData({
            'type': 'FeatureCollection',
            'features': [
                nearestStation
              ]
          }
        );

        map.addLayer({
          id: 'nearest-station',
          type: 'circle',
          source: 'nearest-station',
          paint: {
            'circle-radius': 12,
            'circle-color': '#486DE0'
          }
        }, 'pos_data');
      }
  });
 

    function generateVoronoi() {
        voronoiFeatures = [];

        for (let i = 0; i < ttcCoords.length; i++) {
            if(isNaN(ttcCoords[i][0]) || isNaN(ttcCoords[i][1]))
                continue;
            let voronoiPoint = turf.point(ttcCoords[i]); 
     
            voronoiFeatures.push(voronoiPoint);
            
        }
        const ttcVoronoi = turf.featureCollection(voronoiFeatures);
        
        extent = turf.bbox(ttcVoronoi, 100);
        
        const options = {
            bbox: extent
        };
        
        voronoiPolygons = turf.voronoi(ttcVoronoi, options);        
        
        var filtered = voronoiPolygons.features.filter(function (el) {
                                    return el != null;
                                    });
                                    
        voronoiPolygons.features = filtered;

        var coloring = voronoiPolygons.features.map(function (e) {
            e.properties.color = 'rgba(' + Math.random() * 255 + ',' + Math.random() * 255 + ',' + Math.random() * 255 + ',0.2)';
            return e;
        });

        console.log(voronoiPolygons.features[0].properties);
       
        if (voronoiDraw == false) {                       
            voronoiDraw = true;
            
            map.addLayer({
                'id': 'voronoi',
                'type': 'fill',
                'source': {
                    'type': 'geojson',
                    'data': voronoiPolygons
                },
                'layout': {

                },
                'paint': {
                    'fill-color': {
                        type: 'identity',
                        property: 'color'
                    },//'rgba('+Math.random()*255+','+Math.random()*255+','+Math.random()*255+',0.2)',
                    'fill-opacity': 1,
                    'fill-outline-color': '#899'
                }
            });
             
                         //fit();
                         
        } else {
            map.getSource('voronoi').setData(voronoiPolygons);
        }
        
    }
    function fit() {
        map.setMaxBounds(extent, {padding: 20});
        // console.log(map.getZoom());
    }


    // menu function
    function getOptions(optionNumber){
        var re = "\\?option"+optionNumber+"=";
        var n = location.href.search(re);
        
        if(n == -1)
            return true;
        else{
            if(location.href[n+re.length-1] == 0)
                return false;
            else return true;
        }
        
    }


    function filterButton() {
        /*
        var check1 = document.getElementById("option1");
        var check2 = document.getElementById("option2");
        
        if(!getOptions(1))
        if (checkBox.checked == true){
        
        }
        console.log(getOptions(1));
        ////
        console.log(1);
        var var1 = 1, var2 = 1;
        var re = "\\?option1=";
        var re2 = "\\?option2=";
        var n = location.href.search(re);
        var n2 = location.href.search(re2);
        if(n == -1)
            location.href = location.href+'?option1='+var1;
        else
            location.href = location.href.substr(0, n+re.length-1) + (var1+1)+ location.href.substr(n+re.length);
            
        if(n2 == -1)
            location.href = location.href+'?option2='+var2;
        else
            location.href = location.href.substr(0, n2+re2.length-1) + (var1+1)+ location.href.substr(n2+re2.length);
         */
        
    }


    var checkbox1 = document.querySelector("input[name=option1]");
    
    checkbox1.addEventListener( 'change', function() {
                               var re = "\\?option1=";
                               var n = location.href.search(re);
                               //window.location.reload(false);
                              if(this.checked) {
                               location.href = location.href.substr(0, n+re.length-1) + 1 + location.href.substr(n+re.length);
                   
                              } else {
                               if(n == -1)
                                location.href = location.href+'?option1=0';
                               else
                               location.href = location.href.substr(0, n+re.length-1) + 0 + location.href.substr(n+re.length);
                              }
                               
     });
     
     var checkbox2 = document.querySelector("input[name=option2]");
     
     checkbox2.addEventListener( 'change', function() {
                                var re = "\\?option2=";
                                var n = location.href.search(re);
                                //window.location.reload(false);
                                if(this.checked) {
                                location.href = location.href.substr(0, n+re.length-1) + 1 + location.href.substr(n+re.length);
                                
                                } else {
                                if(n == -1)
                                location.href = location.href+'?option2=0';
                                else
                                location.href = location.href.substr(0, n+re.length-1) + 0 + location.href.substr(n+re.length);
                                }
                                
                                });
                                
                                
    var checkbox3 = document.querySelector("input[name=option3]");
                                
   checkbox3.addEventListener( 'change', function() {
                                                           var re = "\\?option3=";
                                                           var n = location.href.search(re);
                                                           //window.location.reload(false);
                                                           if(this.checked) {
                                                           location.href = location.href.substr(0, n+re.length-1) + 1 + location.href.substr(n+re.length);
                                                           
                                                           } else {
                                                           if(n == -1)
                                                           location.href = location.href+'?option3=0';
                                                           else
                                                           location.href = location.href.substr(0, n+re.length-1) + 0 + location.href.substr(n+re.length);
                                                           }
                                                           
                                                           });

  </script>


</body></html>
